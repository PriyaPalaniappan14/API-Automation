{"name": "test_making_the_get_request_for_checking_the_job_id", "status": "broken", "statusDetails": {"message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Then \"the user validates the analysis output is present in the job response\". Line 32 in scenario \"Making the GET Request for checking the job id\" in the feature \"/Users/priyapalaniappan/Documents/API_AUTOMATION/sampleAutomation/tests/features/getting_status.feature\"", "trace": "self = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nargname = 'pytestbdd_then_the user validates the analysis output is present in the job response'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef[object]\", PseudoFixtureDef[object]]:\n        try:\n>           return self._fixture_defs[argname]\nE           KeyError: 'pytestbdd_then_the user validates the analysis output is present in the job response'\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/_pytest/fixtures.py:589: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nstep = <pytest_bdd.parser.Step object at 0x10f8086a0>, scenario = <pytest_bdd.parser.Scenario object at 0x10f8082b0>\n\n    def _find_step_function(request, step, scenario):\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n>           return request.getfixturevalue(get_step_fixture_name(name, step.type))\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nargname = 'pytestbdd_then_the user validates the analysis output is present in the job response'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n>       fixturedef = self._get_active_fixturedef(argname)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/_pytest/fixtures.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nargname = 'pytestbdd_then_the user validates the analysis output is present in the job response'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef[object]\", PseudoFixtureDef[object]]:\n        try:\n            return self._fixture_defs[argname]\n        except KeyError:\n            try:\n>               fixturedef = self._getnextfixturedef(argname)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/_pytest/fixtures.py:592: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nargname = 'pytestbdd_then_the user validates the analysis output is present in the job response'\n\n    def _getnextfixturedef(self, argname: str) -> \"FixtureDef[Any]\":\n        fixturedefs = self._arg2fixturedefs.get(argname, None)\n        if fixturedefs is None:\n            # We arrive here because of a dynamic call to\n            # getfixturevalue(argname) usage which was naturally\n            # not known at parsing/collection time.\n            assert self._pyfuncitem.parent is not None\n            parentid = self._pyfuncitem.parent.nodeid\n            fixturedefs = self._fixturemanager.getfixturedefs(argname, parentid)\n            # TODO: Fix this type ignore. Either add assert or adjust types.\n            #       Can this be None here?\n            self._arg2fixturedefs[argname] = fixturedefs  # type: ignore[assignment]\n        # fixturedefs list is immutable so we maintain a decreasing index.\n        index = self._arg2index.get(argname, 0) - 1\n        if fixturedefs is None or (-index > len(fixturedefs)):\n>           raise FixtureLookupError(argname, self)\nE           _pytest.fixtures.FixtureLookupError: ('pytestbdd_then_the user validates the analysis output is present in the job response', <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/_pytest/fixtures.py:473: FixtureLookupError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>, _pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:138: in _execute_scenario\n    step_func = _find_step_function(request, step, scenario)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_making_the_get_request_for_checking_the_job_id>>\nstep = <pytest_bdd.parser.Step object at 0x10f8086a0>, scenario = <pytest_bdd.parser.Scenario object at 0x10f8082b0>\n\n    def _find_step_function(request, step, scenario):\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n            return request.getfixturevalue(get_step_fixture_name(name, step.type))\n        except FixtureLookupError:\n            try:\n                # Could not find a fixture with the same name, let's see if there is a parser involved\n                name = find_argumented_step_fixture_name(name, step.type, request._fixturemanager, request)\n                if name:\n                    return request.getfixturevalue(name)\n                raise\n            except FixtureLookupError:\n>               raise exceptions.StepDefinitionNotFoundError(\n                    f\"Step definition is not found: {step}. \"\n                    f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                )\nE               pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Then \"the user validates the analysis output is present in the job response\". Line 32 in scenario \"Making the GET Request for checking the job id\" in the feature \"/Users/priyapalaniappan/Documents/API_AUTOMATION/sampleAutomation/tests/features/getting_status.feature\"\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pytest_bdd/scenario.py:86: StepDefinitionNotFoundError"}, "description": "/Users/priyapalaniappan/Documents/API_AUTOMATION/sampleAutomation/tests/features/getting_status.feature: Making the GET Request for checking the job id", "start": 1652802356847, "stop": 1652802357006, "uuid": "87d2a88b-b313-455d-974e-f1bebf241a28", "historyId": "105cd0d231629b1b819e764dc737e6c2", "testCaseId": "72b1ea4d27f5c58a0ca32da74007dfb6", "fullName": "sampleAutomation.tests.step_definitions.test_post_getting_ID#test_making_the_get_request_for_checking_the_job_id", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "sampleAutomation.tests.step_definitions"}, {"name": "suite", "value": "test_post_getting_ID"}, {"name": "host", "value": "Priyas-MacBook-Pro.local"}, {"name": "thread", "value": "8335-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "sampleAutomation.tests.step_definitions.test_post_getting_ID"}]}